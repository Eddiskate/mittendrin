<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Page', 'doctrine');

/**
 * BasePage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idpage
 * @property string $page_name
 * @property string $page_title
 * @property string $body
 * @property integer $cart_idcart
 * @property integer $publication
 * @property integer $position
 * @property integer $position_order
 * @property integer $rows
 * @property integer $page_default
 * @property string $position_row
 * @property string $redirect_to_url
 * @property integer $redirect_to_url_blank_open
 * @property string $page_name_url
 * @property Cart $Cart
 * @property Doctrine_Collection $BpcmsPageI18n
 * @property Doctrine_Collection $BpcmsPlaylist
 * @property Doctrine_Collection $GalleryToPage
 * @property Doctrine_Collection $PageBackup
 * 
 * @method integer             getIdpage()                     Returns the current record's "idpage" value
 * @method string              getPageName()                   Returns the current record's "page_name" value
 * @method string              getPageTitle()                  Returns the current record's "page_title" value
 * @method string              getBody()                       Returns the current record's "body" value
 * @method integer             getCartIdcart()                 Returns the current record's "cart_idcart" value
 * @method integer             getPublication()                Returns the current record's "publication" value
 * @method integer             getPosition()                   Returns the current record's "position" value
 * @method integer             getPositionOrder()              Returns the current record's "position_order" value
 * @method integer             getRows()                       Returns the current record's "rows" value
 * @method integer             getPageDefault()                Returns the current record's "page_default" value
 * @method string              getPositionRow()                Returns the current record's "position_row" value
 * @method string              getRedirectToUrl()              Returns the current record's "redirect_to_url" value
 * @method integer             getRedirectToUrlBlankOpen()     Returns the current record's "redirect_to_url_blank_open" value
 * @method string              getPageNameUrl()                Returns the current record's "page_name_url" value
 * @method Cart                getCart()                       Returns the current record's "Cart" value
 * @method Doctrine_Collection getBpcmsPageI18n()              Returns the current record's "BpcmsPageI18n" collection
 * @method Doctrine_Collection getBpcmsPlaylist()              Returns the current record's "BpcmsPlaylist" collection
 * @method Doctrine_Collection getGalleryToPage()              Returns the current record's "GalleryToPage" collection
 * @method Doctrine_Collection getPageBackup()                 Returns the current record's "PageBackup" collection
 * @method Page                setIdpage()                     Sets the current record's "idpage" value
 * @method Page                setPageName()                   Sets the current record's "page_name" value
 * @method Page                setPageTitle()                  Sets the current record's "page_title" value
 * @method Page                setBody()                       Sets the current record's "body" value
 * @method Page                setCartIdcart()                 Sets the current record's "cart_idcart" value
 * @method Page                setPublication()                Sets the current record's "publication" value
 * @method Page                setPosition()                   Sets the current record's "position" value
 * @method Page                setPositionOrder()              Sets the current record's "position_order" value
 * @method Page                setRows()                       Sets the current record's "rows" value
 * @method Page                setPageDefault()                Sets the current record's "page_default" value
 * @method Page                setPositionRow()                Sets the current record's "position_row" value
 * @method Page                setRedirectToUrl()              Sets the current record's "redirect_to_url" value
 * @method Page                setRedirectToUrlBlankOpen()     Sets the current record's "redirect_to_url_blank_open" value
 * @method Page                setPageNameUrl()                Sets the current record's "page_name_url" value
 * @method Page                setCart()                       Sets the current record's "Cart" value
 * @method Page                setBpcmsPageI18n()              Sets the current record's "BpcmsPageI18n" collection
 * @method Page                setBpcmsPlaylist()              Sets the current record's "BpcmsPlaylist" collection
 * @method Page                setGalleryToPage()              Sets the current record's "GalleryToPage" collection
 * @method Page                setPageBackup()                 Sets the current record's "PageBackup" collection
 * 
 * @package    blackcms
 * @subpackage model
 * @author     Damian Kania @ Eddi blackpage.pl 2012
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('page');
        $this->hasColumn('idpage', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('page_name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('page_title', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('body', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('cart_idcart', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('publication', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('position', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('position_order', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('rows', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('page_default', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('position_row', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('redirect_to_url', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('redirect_to_url_blank_open', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('page_name_url', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Cart', array(
             'local' => 'cart_idcart',
             'foreign' => 'idcart'));

        $this->hasMany('BpcmsPageI18n', array(
             'local' => 'idpage',
             'foreign' => 'page_idpage'));

        $this->hasMany('BpcmsPlaylist', array(
             'local' => 'idpage',
             'foreign' => 'page_idpage'));

        $this->hasMany('GalleryToPage', array(
             'local' => 'idpage',
             'foreign' => 'page_idpage'));

        $this->hasMany('PageBackup', array(
             'local' => 'idpage',
             'foreign' => 'page_idpage'));
    }
}