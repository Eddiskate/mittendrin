<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Webusers', 'doctrine');

/**
 * BaseWebusers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idwebusers
 * @property string $email
 * @property string $passwd
 * @property string $name
 * @property string $lastname
 * @property integer $active
 * @property string $created_at
 * @property integer $post_city_idpost_city
 * @property integer $default_city
 * @property string $default_lang
 * @property integer $reg_accept
 * @property string $status
 * @property Doctrine_Collection $Stimme
 * 
 * @method integer             getIdwebusers()            Returns the current record's "idwebusers" value
 * @method string              getEmail()                 Returns the current record's "email" value
 * @method string              getPasswd()                Returns the current record's "passwd" value
 * @method string              getName()                  Returns the current record's "name" value
 * @method string              getLastname()              Returns the current record's "lastname" value
 * @method integer             getActive()                Returns the current record's "active" value
 * @method string              getCreatedAt()             Returns the current record's "created_at" value
 * @method integer             getPostCityIdpostCity()    Returns the current record's "post_city_idpost_city" value
 * @method integer             getDefaultCity()           Returns the current record's "default_city" value
 * @method string              getDefaultLang()           Returns the current record's "default_lang" value
 * @method integer             getRegAccept()             Returns the current record's "reg_accept" value
 * @method string              getStatus()                Returns the current record's "status" value
 * @method Doctrine_Collection getStimme()                Returns the current record's "Stimme" collection
 * @method Webusers            setIdwebusers()            Sets the current record's "idwebusers" value
 * @method Webusers            setEmail()                 Sets the current record's "email" value
 * @method Webusers            setPasswd()                Sets the current record's "passwd" value
 * @method Webusers            setName()                  Sets the current record's "name" value
 * @method Webusers            setLastname()              Sets the current record's "lastname" value
 * @method Webusers            setActive()                Sets the current record's "active" value
 * @method Webusers            setCreatedAt()             Sets the current record's "created_at" value
 * @method Webusers            setPostCityIdpostCity()    Sets the current record's "post_city_idpost_city" value
 * @method Webusers            setDefaultCity()           Sets the current record's "default_city" value
 * @method Webusers            setDefaultLang()           Sets the current record's "default_lang" value
 * @method Webusers            setRegAccept()             Sets the current record's "reg_accept" value
 * @method Webusers            setStatus()                Sets the current record's "status" value
 * @method Webusers            setStimme()                Sets the current record's "Stimme" collection
 * 
 * @package    blackcms
 * @subpackage model
 * @author     Damian Kania @ Eddi blackpage.pl 2012
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseWebusers extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('webusers');
        $this->hasColumn('idwebusers', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('passwd', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('lastname', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('active', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('post_city_idpost_city', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('default_city', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('default_lang', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('reg_accept', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('status', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Stimme', array(
             'local' => 'idwebusers',
             'foreign' => 'webusers_idwebusers'));
    }
}