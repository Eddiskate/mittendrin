<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Post', 'doctrine');

/**
 * BasePost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idpost
 * @property string $title
 * @property string $description
 * @property string $created_at
 * @property integer $archiv
 * @property integer $newsletter
 * @property string $avatar
 * @property integer $post_catalog_idpost_catalog
 * @property integer $users_idusers
 * @property string $column_type
 * @property integer $recommended
 * @property string $title_header
 * @property string $title_recommended
 * @property integer $publication
 * @property PostCatalog $PostCatalog
 * @property Users $Users
 * @property Doctrine_Collection $BpcmsPostI18n
 * @property Doctrine_Collection $GalleryToPost
 * @property Doctrine_Collection $PostHasPostTags
 * 
 * @method integer             getIdpost()                      Returns the current record's "idpost" value
 * @method string              getTitle()                       Returns the current record's "title" value
 * @method string              getDescription()                 Returns the current record's "description" value
 * @method string              getCreatedAt()                   Returns the current record's "created_at" value
 * @method integer             getArchiv()                      Returns the current record's "archiv" value
 * @method integer             getNewsletter()                  Returns the current record's "newsletter" value
 * @method string              getAvatar()                      Returns the current record's "avatar" value
 * @method integer             getPostCatalogIdpostCatalog()    Returns the current record's "post_catalog_idpost_catalog" value
 * @method integer             getUsersIdusers()                Returns the current record's "users_idusers" value
 * @method string              getColumnType()                  Returns the current record's "column_type" value
 * @method integer             getRecommended()                 Returns the current record's "recommended" value
 * @method string              getTitleHeader()                 Returns the current record's "title_header" value
 * @method string              getTitleRecommended()            Returns the current record's "title_recommended" value
 * @method integer             getPublication()                 Returns the current record's "publication" value
 * @method PostCatalog         getPostCatalog()                 Returns the current record's "PostCatalog" value
 * @method Users               getUsers()                       Returns the current record's "Users" value
 * @method Doctrine_Collection getBpcmsPostI18n()               Returns the current record's "BpcmsPostI18n" collection
 * @method Doctrine_Collection getGalleryToPost()               Returns the current record's "GalleryToPost" collection
 * @method Doctrine_Collection getPostHasPostTags()             Returns the current record's "PostHasPostTags" collection
 * @method Post                setIdpost()                      Sets the current record's "idpost" value
 * @method Post                setTitle()                       Sets the current record's "title" value
 * @method Post                setDescription()                 Sets the current record's "description" value
 * @method Post                setCreatedAt()                   Sets the current record's "created_at" value
 * @method Post                setArchiv()                      Sets the current record's "archiv" value
 * @method Post                setNewsletter()                  Sets the current record's "newsletter" value
 * @method Post                setAvatar()                      Sets the current record's "avatar" value
 * @method Post                setPostCatalogIdpostCatalog()    Sets the current record's "post_catalog_idpost_catalog" value
 * @method Post                setUsersIdusers()                Sets the current record's "users_idusers" value
 * @method Post                setColumnType()                  Sets the current record's "column_type" value
 * @method Post                setRecommended()                 Sets the current record's "recommended" value
 * @method Post                setTitleHeader()                 Sets the current record's "title_header" value
 * @method Post                setTitleRecommended()            Sets the current record's "title_recommended" value
 * @method Post                setPublication()                 Sets the current record's "publication" value
 * @method Post                setPostCatalog()                 Sets the current record's "PostCatalog" value
 * @method Post                setUsers()                       Sets the current record's "Users" value
 * @method Post                setBpcmsPostI18n()               Sets the current record's "BpcmsPostI18n" collection
 * @method Post                setGalleryToPost()               Sets the current record's "GalleryToPost" collection
 * @method Post                setPostHasPostTags()             Sets the current record's "PostHasPostTags" collection
 * 
 * @package    blackcms
 * @subpackage model
 * @author     Damian Kania @ Eddi blackpage.pl 2012
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePost extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('post');
        $this->hasColumn('idpost', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('created_at', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('archiv', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('newsletter', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('avatar', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('post_catalog_idpost_catalog', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('users_idusers', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('column_type', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('recommended', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('title_header', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('title_recommended', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('publication', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('PostCatalog', array(
             'local' => 'post_catalog_idpost_catalog',
             'foreign' => 'idpost_catalog'));

        $this->hasOne('Users', array(
             'local' => 'users_idusers',
             'foreign' => 'idusers'));

        $this->hasMany('BpcmsPostI18n', array(
             'local' => 'idpost',
             'foreign' => 'post_idpost'));

        $this->hasMany('GalleryToPost', array(
             'local' => 'idpost',
             'foreign' => 'post_idpost'));

        $this->hasMany('PostHasPostTags', array(
             'local' => 'idpost',
             'foreign' => 'post_idpost'));
    }
}